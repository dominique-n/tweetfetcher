(Math/floor 1/10)
(doc spit)
seq?
(seq ())
(seq? ())
(doc rest)
(rest ())
(next ())
(take 180 [1 2])
(get {:id {:id1 1}} [:id :id1])
(get {:id {:id1 1}} :id :id1)
(get-in {:id {:id1 1}} [:id [D:id1])
(get-in {:id {:id1 1}} [:id :id1])
(get-in {:id {:id1 1}} :id)
(get-in {:id {:id1 1}} [id])
(get-in {:id {:id1 1}} [:id])
(doc case)
(doc clojure.string/join)
(clojure.string/join ',' 'yo' 'co')
(clojure.string/join ',' [ 'yo' 'co'])
(doc clojure.string/join)
(clojure.string/join [ 'yo' 'co'])
(clojure.string/join [ ',' 'yo' 'co'])
(doc str)
(clojure.string/join [ ',' 'yo' 'co'])
(clojure.string/join [ ";" 'yo' 'co'])
(clojure.string/join [ ";" "co" "yo"])
(clojure.string/join ";" [ "co" "yo"])
(str "yo "co"
)
(str "yo "co")
(apply str "yo "co")
(str :yo)
(vector 1 2)
(doc clojure.string/lower-case)
(assoc {} [1 2] [:a:b])
(f/parse custom-formatter  "2012 Feb 27")
(clj-time.format/parse custom-formatter  "2012 Feb 27")
(clj-time.format/parse tweetfetcher.core/custom-formatter  "2012 Feb 27")
(f/parse custom-formatter  "2012 Feb 27")
(let [created_at (-> trump0 :statuses last :created_at clojure.string/lower-case)                                                       | 82          (first (stream-fields op-fields twts)) => (just ["text" "entitiesXhashtagsXtext" "entitiesXurls"])                        
      custom-formatter (f/formatter "E MMM d H:m:s Z yyyy")]                                                                            | 83          (second (stream-fields op-fields twts)) => (just ["tweet" "hashtag0,hashtag1" 0])))                                       
(f/parse custom-formatter  "2012 Feb 27")
(java.util.Locale/getDefault)
(str "a" "b")
(assoc {} :k 1 :n 1)
(def a '(println "yo))
a
(do a)
(println a)
(def a '(println "yo))
(def a '(println "yo"))
a
~a
~(a)
(def a `(println "yo"))
~a
(conj [1] 2)
(type {})
(class {})
(doc hash-map)
(use 'midje.sweet)
(flatten [])
